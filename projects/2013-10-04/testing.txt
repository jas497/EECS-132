Testing report for project due 2013-10-04
James Starkman, jas497

Tests were done with the DrJava interactions pane and copied.  Results below.
Notes on styling:
	number of asterisks notes major divisions.  
	3 for begin/end, 2 for headings, 1 for each part
	groupings from Prof Connamacher's testing guidelines

***BEGIN REPORT ON Stock.java CLASS***

**Getter and setter functions/methods**
All should do as the name implies.  Getter should return what was input to
the setter function.  Some get/set functions will be tested again, later.
> import Stock;
> Stock foo = new Stock("ABCD", 12.34);
> foo.setCompanyName("Alphabet soup inc.")
> foo.getCompanyName()
"Alphabet soup inc."
> foo.setTickerSymbol("ZYXW")
> foo.getTickerSymbol()
"ZYXW"
> foo.setCurrentPrice(24.68)
> foo.getCurrentPrice()
24.68
> foo.getNumberShares()
0
> foo.getCostBasis()
0.0
> 

**Constructors**
These should initialise objects appropriately, and set the right values.  Note
that this constructor works by calling the other one, which was tested above.
> import Stock;
> Stock fooBar = new Stock("Joe's Widgets", "JW", 10.00);
> fooBar.getCompanyName()
"Joe's Widgets"
> fooBar.getTickerSymbol()
"JW"
> fooBar.getCurrentPrice()
10.0
> 

**Other methods/functions**
Anything more complicated than get/set.

*buy(int numShares, double commission)*
10 shares at $50/share + $7 commission should yield $507 cost basis.  If this
happens twice, cB should be 1014 (=2*507).
> import Stock;
> Stock foo = new Stock("ABCD", 50.00);
> foo.buy(10, 7.0) //shares, commission
507.0
> foo.getNumberShares()
10
> foo.getCostBasis()
507.0
> foo.buy(10, 7.0) //shares, commission
507.0
> foo.getNumberShares()
20
> foo.getCostBasis()
1014.0
> 

*sell(int numShares, double commission)*
If more is sold than owned, nothing should happen.  Else:
	try selling 10 shares at $100
		cost basis should be 507
		cap gains should be 486 (=(1000 made - 7 comm.) - 507 paid)
		return should be 993 profit
	try selling 10 shares at $25
		cost basis should be 0
		cap gains should be 222 (=(486 old + ((250 made - 7 comm.) - 507 paid)))
			result of paying four $7 commissions
		return should be 243 profit
> foo.getNumberShares()
20
> foo.getCostBasis()
1014.0
> foo.setCurrentPrice(100)
> foo.sell(21, 7)
0.0
> foo.getNumberShares()
20
> foo.getCostBasis()
1014.0
> foo.sell(10, 7)
993.0
> foo.getCostBasis()
507.0
> foo.getCapitalGains()
486.0
> foo.setCurrentPrice(25)
> foo.sell(10, 7)
243.0
> foo.getCostBasis()
0.0
> foo.getCapitalGains()
222.0
> 

*split(int ratioNumerator, int ratioDenominator)*
A split is when a company multiplies its share quantity by a fraction and 
divides the stock price by same.  If a share used to cost 30 and the company
does split(3,1), then there would be triple the number of shares and each
would cost/be worth 10.  Total company value does not change.
If the split results in owning part of a stock (which is not allowed), then 
the partial share is sold at market value.  If split(1,7) on previous output, 
then should end in 42 owned, price of 70, made 60 from partial share sale.  
This means capital gains of 53 (=60-7) and cost basis of 2940 (= old CB - 60).
> import Stock;
> Stock foo = new Stock("ABCD", 30)
> //integral shares
> foo.getNumberShares()
0
> foo.getCapitalGains()
0.0
> foo.getCostBasis()
0.0
> foo.getCurrentPrice()
30.0
> foo.buy(100, 7)
3007.0
> foo.split(3,1)
0.0
> foo.getNumberShares()
300
> foo.getCurrentPrice()
10.0
> foo.getCapitalGains()
-7.0
> foo.getCostBasis()
3000.0
> //this is for fractional
> foo.split(1,7)
59.99999999999979
> foo.getNumberShares()
42
> foo.getCurrentPrice()
70.0
> foo.getCapitalGains()
52.99999999999979
> foo.getCostBasis()
2940.0
> 

***END REPORT ON Stock.java CLASS***

***BEGIN REPORT ON Cash.java CLASS***

**Getter/setter**
All should do as the name implies.  Getter should return what was input to
the setter function.  Some get/set functions will be tested again, later.
> import Cash;
> Cash bar = new Cash(0.02, 0.03, 5000.0, 25.0) //interest, loan, limit, fee
> bar.deposit(-500)
> bar.getBalance()
0.0
> bar.deposit(1000.0) //needed to begin
> bar.getBalance()
1000.0
> bar.getSavingsRate()
0.02
> bar.setSavingsRate(.015) //1.5%
> bar.getSavingsRate()
0.015
> bar.setLoanRate(.05) //5%
> bar.getLoanRate()
0.05
> bar.setLoanLimit(10000) //10k
> bar.getLoanLimit()
10000.0
> bar.setOverdraftPenalty(75) //US$75
> bar.getOverdraftPenalty()
75.0
> 

**Constructors**
These should initialise objects appropriately, and set the right values.  Only
one for this class.  
> Cash bar = new Cash(0.02, 0.03, 5000.0, 25.0) //interest, loan, limit, fee
> bar.getSavingsRate()
0.02
> bar.getLoanRate()
0.03
> bar.getLoanLimit()
5000.0
> bar.getOverdraftPenalty()
25.0
> 

**Other methods/functions**
Anything more complicated than get/set.  A temporary getCMI (current monthly
interest) method was created to facilitate testing.  It was removed following
testing of the class.  

*withdraw(double amount)*
Removes the amount from the account, if it can, and returns true.  If more is
withdrawn than is in the account, returns false instead.
> bar.getBalance()
0.0
> bar.deposit(10000) //10k
> bar.withdraw(9000)
true
> bar.withdraw(9000)
false
> 

*transfer(double amount)*
Removes amount from the account, irrelevant of what is already in there.  Note
that this allows one to go into debt.
> bar.getBalance()
1000.0
> bar.transfer(9000)
> bar.getBalance()
-8000.0
> 

*processMonth()*
Run on the first of each month.  The balance should be increased by the CMI, 
which should itself be zeroed out.  If balance used to be -10000, and CMI used
to be -1.64, then balance should become -10001.64, and CMI should be 0.0.
Also, should set a flag for processDay() to read, to determine overdrafting.  
If flag is false, only the first two actions should occur.  If the flag is
true, see processDay() for details. 

There may be bugs here.

> bar.getBalance()
-10000.0
> bar.getCMI()
-1.643835616438356
> bar.getLoanLimit()
5000.0
> bar.processMonth()
> bar.getBalance()
-10001.643835616438
> bar.getCMI()
0.0
> 

*processDay()*
Run daily.  If account is in the black (balance >= 0), a balance of 10000 and
a savings rate of 0.02 (2%) should make current monthly interest (CMI) go up
by ~.548 (~(10000 * 0.02)/365).  If in the red (balance < 0), same should 
occur, but with loan rate, not interest rate.  If loan rate is 0.03 (3%), CMI
should go up by ~-0.822 (~(-10000 * 0.03)/365).  

With regard to the flag:
It causes the overdraft fee to be applied once per month, if at all.  
> import Cash;
> Cash bar = new Cash(0.02, 0.03, 5000.0, 25.0) //interest, loan, limit, fee
> bar.getCMI()
0.0
> bar.deposit(10000)
> bar.getBalance()
10000.0
> bar.processDay()
> bar.getCMI()
0.547945205479452
> bar.getCMI()
0.547945205479452
> bar.processDay()
> bar.getCMI()
1.095890410958904
> bar.processDay()
> bar.getCMI()
1.643835616438356
> 
> Cash bar = new Cash(0.02, 0.03, 5000.0, 25.0) //interest, loan, limit, fee
> bar.getBalance()
0.0
> bar.transfer(10000)
> bar.getBalance()
-10000.0
> bar.processDay()
> bar.getCMI()
-0.821917808219178
> bar.processDay()
> bar.getCMI()
-1.643835616438356
> 


***END REPORT ON Cash.java CLASS***

***BEGIN REPORT ON Date.java CLASS***

**Getter and setter**
All should do as the name implies.  Getter should return what was input to
the setter function.  Some get/set functions will be tested again, later.
> import Date
> Date baz = new Date(4, 10, 2013)
> baz.getDay()
4
> baz.getMonth()
10
> baz.getYear()
2013
> 

**Constructor**
These should initialise objects appropriately, and set the right values.
See previous section, anything testable here was already tested there.

**Other methods/functions**
Anything more complicated than get/set.

*incrementDay()*
Note: dates are in form YYYY-MM-DD.
If the due date is passed in, then this should return 2013-10-05.  If 
2012-12-31, then 2013-01-01.  If 2013-02-28, then 2013-03-01 (no leap years).
> Date baz = new Date(4, 10, 2013)
> baz.incrementDay()
> System.out.println(baz.getYear() +"-"+ baz.getMonth() +"-"+ baz.getDay())
2013-10-5
> 
> Date baz = new Date(31, 12, 2012)
> baz.incrementDay()
> System.out.println(baz.getYear() +"-"+ baz.getMonth() +"-"+ baz.getDay())
2013-1-1
> 
> Date baz = new Date(28, 2, 2013)
> baz.incrementDay()
> System.out.println(baz.getYear() +"-"+ baz.getMonth() +"-"+ baz.getDay())
2013-3-1
> 

***END REPORT ON Date.java CLASS***

***BEGIN REPORT ON Customer.java CLASS***

**Getter and setter functions/methods**
All should do as the name implies.  Getter should return what was input to
the setter function.  Some get/set functions will be tested again, later.
> import Stock; import Cash; import Date; import Customer;
> Stock foo = new Stock("A", 10.00)
> Cash  bar = new Cash(0.02, 0.03, 5000.0, 25.0)
> Date  baz = new Date(4, 10, 2013)
> Customer joe = new Customer(7.0, foo, bar, baz)
> joe.setFirstName("Joe")
> joe.getFirstName()
"Joe"
> joe.setLastName("Smith")
> joe.getLastName()
"Smith"
> joe.setAddress("123 Main Street")
> joe.getAddress()
"123 Main Street"
> joe.setStockAccount(new Stock("Alphabet soup co.", "ABCD", 20.00))
> joe.getStockAccount()
Stock@23588b
> joe.setCashAccount(bar)
> joe.getCashAccount()
Cash@4e30ec
> joe.setCommissionAmount(13.00)
> joe.getCommissionAmount()
13.0
> joe.getDate()
Date@c0bc4f
> 

**Constructors**
These should initialise objects appropriately, and set the right values.  Note
that this constructor works by calling the other one, which was tested above.
Line length has not been constrained to these 80 lines.
> Customer bob = new Customer("Robert", "Cohen", "123 Elm Street", 2.5, foo, bar, baz)
> bob.getFirstName()
"Robert"
> bob.getLastName()
"Cohen"
> bob.getAddress()
"123 Elm Street"
> //rest were tested in other constructor
> 

**Other methods/functions**
Anything more complicated than get/set.

*currentValue()*
If Cash balance was 5007, and commission is 7, and owns 2000 shares at $10
each, then return should be 25000 (=5007 + (1000*20) - 7).
Line was broken to fit the display.
> Customer bob = new Customer("Robert", "Cohen", "123 Elm Street", 7.0,
	new Stock("ABCD", 10.0), new Cash(0.02, 0.03, 5000.0, 25.0), 
	new Date(4, 10, 2013))
> bob.deposit(25007)
> bob.buyShares(2000)
true
> bob.currentValue()
25000.0
> 

*getYearlyCapitalGains()*
If 1000 shares were bought at 25/ea, and the pricewas 40/ea at time of sale,
and commission is 7/trade, and all 1000 were then sold, and a new year
occured, then should be 14986.0 (= (40 * 1000) - (25 * 1000) - (2 trades 
* 7 comm)).
Line was broken to fit the display.
> Customer bob = new Customer("Robert", "Cohen", "123 Elm Street", 7.0,
	new Stock("ABCD", 10.0), new Cash(0.02, 0.03, 5000.0, 25.0), 
	new Date(4, 10, 2013))
> bob.getStockAccount().setCurrentPrice(25)
> bob.deposit(30000)
> bob.buyShares(1000)
true
> bob.getStockAccount().setCurrentPrice(40)
> bob.sellShares(1000)
> for(int i=0; i<100; i++){bob.incrementDate();} //should be enough...
> bob.getYearlyCapitalGains()
14986.0
> 


*deposit(double amount)*
Puts money in Customer.Cash.balance.  If that was 0.0 before, and 5000 was
deposited, it should now be 5000.
> bob
Customer@becd86
> bob.getCashAccount().getBalance()
0.0
> bob.deposit(5000)
> bob.getCashAccount().getBalance()
5000.0
> 

*withdraw(double amount)*
If balance used to be 5000, and 3500 is withdrawn, then should be true.  If 
balance is now 1500 and any more than that (e.g., 1501) is withdrawn, returns
false and makes no changes.
> bob.getCashAccount().getBalance()
5000.0
> bob.withdraw(3500)
true
> bob.getCashAccount().getBalance()
1500.0
> bob.withdraw(1501)
false
> bob.getCashAccount().getBalance()
1500.0
> 

*buyShares(int numShares)*
If Stock.buy of numShares (say, 1000) and commission (say, 7) would cost more
than currentValue (say, 2500), do not buy and return false.  If numShares 
would cost less than current value (say, if only 100), then return true.
Also, current value should go down by commission*(valid transactions made),
which here is 2493 (=2500 original - (7 comm * 1 valid trade)).
First line has been broken to fit on the display.
> Customer bob = new Customer("Robert", "Cohen", "123 Elm Street", 7.0, 
	new Stock("ABCD", 10.0), new Cash(0.02, 0.03, 5000.0, 25.0), 
	new Date(4, 10, 2013))
> bob.currentValue()
0.0
> bob.deposit(2500)
> bob.buyShares(100)
true
> bob.buyShares(1000)
false
> bob.currentValue()
2493.0
> 

*sellShares(int numShares)*
If 100 shares are owned, and 30 sold (at $10), should increase balance by 300
(less commission).  If old balance was 1493, new should be $1786 (=$1493 +
(30 sold * $10) - $7 comm)
> bob.getStockAccount().getNumberShares()
100
> bob.getStockAccount().getCurrentPrice()
10.0
> bob.getCashAccount().getBalance()
1493.0
> bob.getCommissionAmount()
7.0
> bob.sellShares(30)
> bob.getCashAccount().getBalance()
1786.0
> 

**incrementDate()**
If current date is 2013-10-04 and method is called, should be 2013-10-04.
If 2013-10-31, then 2013-11-01 and Cash.processMonth() called, which should
increase balance by interest.  As long as the new balance is larger, this test
holds.  If 2013-12-31, then 2014-01-01 and capital gains should change.  As
long as updated, test works.
First line has been broken to fit on the display.
> Customer bob = new Customer("Robert", "Cohen", "123 Elm Street", 7.0, 
	new Stock("ABCD", 10.0), new Cash(0.02, 0.03, 5000.0, 25.0), 
	new Date(4, 10, 2013))
> bob.deposit(2000)
> bob.incrementDate()
> bob.getDate().getDay()
5
> 
> bob.getCashAccount().getBalance()
2000.0
> for(int i=5; i<31; i++) bob.incrementDate();
> bob.getDate().getDay()
31
> bob.incrementDate()
> bob.getCashAccount().getBalance()
2003.0684931506848
> bob.getDate().getDay()
1
> bob.getDate().getMonth()
11
> 
> for(int i=0; i<60; i++) bob.incrementDate();
> bob.getDate().getDay()
31
> bob.getDate().getMonth()
12
> bob.getYearlyCapitalGains()
0.0
> bob.buyShares(150)
true
> bob.getStockAccount().setCurrentPrice(100)
> bob.sellShares(100)
> bob.currentValue()
15492.361208481892
> bob.getYearlyCapitalGains()
0.0
> bob.incrementDate()
> bob.getYearlyCapitalGains()
8988.333333333334
> bob.getDate().getDay()
1
> bob.getDate().getMonth()
1
> bob.getDate().getYear()
2014
> 
***END REPORT ON Customer.java CLASS***
